// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod seed_keeper {
  pub mod wallet {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// The confuration of the seed keeper
      #[derive(Clone)]
      pub struct Credentials {
        /// The username to use for the seed keeper
        pub username: wit_bindgen::rt::vec::Vec::<u8>,
        /// The password to use for the seed keeper
        pub password: wit_bindgen::rt::vec::Vec::<u8>,
        /// Optional prevously generated encrypted seed to use for the seed keeper
        pub encrypted: Option<wit_bindgen::rt::vec::Vec::<u8>>,
      }
      impl ::core::fmt::Debug for Credentials {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Credentials").field("username", &self.username).field("password", &self.password).field("encrypted", &self.encrypted).finish()
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod config {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Credentials = super::super::super::seed_keeper::wallet::types::Credentials;
      #[allow(unused_unsafe, clippy::all)]
      /// Load into the component from an encrypted seed, password, and salt (username)
      /// Returns the encrypted seed or an error
      pub fn set_config(config: &Credentials,) -> Result<(),wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let super::super::super::seed_keeper::wallet::types::Credentials{ username:username0, password:password0, encrypted:encrypted0, } = config;
          let vec1 = username0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = password0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let (result4_0,result4_1,result4_2,) = match encrypted0 {
            Some(e) => {
              let vec3 = e;
              let ptr3 = vec3.as_ptr() as i32;
              let len3 = vec3.len() as i32;
              
              (1i32, ptr3, len3)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };let ptr5 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wallet/config@0.1.0")]
          extern "C" {
            #[link_name = "set-config"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2, result4_0, result4_1, result4_2, ptr5);
          let l6 = i32::from(*((ptr5 + 0) as *const u8));
          match l6 {
            0 => {
              let e = ();
              Ok(e)
            }
            1 => {
              let e = {
                let l7 = *((ptr5 + 4) as *const i32);
                let l8 = *((ptr5 + 8) as *const i32);
                let len9 = l8 as usize;
                let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);
                
                wit_bindgen::rt::string_lift(bytes9)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Returns the encrypted seed or None if it doesn't exist
      pub fn get_encrypted() -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wallet/config@0.1.0")]
          extern "C" {
            #[link_name = "get-encrypted"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                let l3 = *((ptr0 + 8) as *const i32);
                let len4 = l3 as usize;
                
                Vec::from_raw_parts(l2 as *mut _, len4, len4)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l5 = *((ptr0 + 4) as *const i32);
                let l6 = *((ptr0 + 8) as *const i32);
                let len7 = l6 as usize;
                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                
                wit_bindgen::rt::string_lift(bytes7)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Get the plaintext seed
      pub fn get_seed() -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wallet/config@0.1.0")]
          extern "C" {
            #[link_name = "get-seed"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                let l3 = *((ptr0 + 8) as *const i32);
                let len4 = l3 as usize;
                
                Vec::from_raw_parts(l2 as *mut _, len4, len4)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l5 = *((ptr0 + 4) as *const i32);
                let l6 = *((ptr0 + 8) as *const i32);
                let len7 = l6 as usize;
                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                
                wit_bindgen::rt::string_lift(bytes7)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod seed_keeper {
    pub mod edwards_wit {
      
      #[allow(clippy::all)]
      pub mod operations {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "seed-keeper:edwards-wit/operations@0.1.0#sign"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_sign(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let result1 = <_GuestImpl as Guest>::sign(Vec::from_raw_parts(arg0 as *mut _, len0, len0));
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            match result1 {
              Ok(e) => { {
                *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                let vec3 = (e).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr2 + 8) as *mut i32) = len3;
                *((ptr2 + 4) as *mut i32) = ptr3;
              } },
              Err(e) => { {
                *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr2 + 8) as *mut i32) = len4;
                *((ptr2 + 4) as *mut i32) = ptr4;
              } },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_seed-keeper:edwards-wit/operations@0.1.0#sign"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_sign(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  let base3 = l1;
                  let len3 = l2;
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                },
                _ => {
                  let l4 = *((arg0 + 4) as *const i32);
                  let l5 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "seed-keeper:edwards-wit/operations@0.1.0#verify"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_verify(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let len1 = arg3 as usize;
            let result2 = <_GuestImpl as Guest>::verify(Vec::from_raw_parts(arg0 as *mut _, len0, len0), Vec::from_raw_parts(arg2 as *mut _, len1, len1));
            let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
            match result2 {
              Ok(e) => { {
                *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                *((ptr3 + 4) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
              } },
              Err(e) => { {
                *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr3 + 8) as *mut i32) = len4;
                *((ptr3 + 4) as *mut i32) = ptr4;
              } },
            };ptr3
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_seed-keeper:edwards-wit/operations@0.1.0#verify"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_verify(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => (),
                _ => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
              }
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn sign(message: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>;
          fn verify(message: wit_bindgen::rt::vec::Vec::<u8>,signature: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<bool,wit_bindgen::rt::string::String>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:example"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 691] = [3, 0, 7, 101, 120, 97, 109, 112, 108, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 125, 1, 65, 2, 1, 66, 7, 1, 112, 125, 1, 106, 1, 0, 1, 115, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 0, 0, 1, 4, 0, 4, 115, 105, 103, 110, 1, 2, 1, 106, 1, 127, 1, 115, 1, 64, 2, 7, 109, 101, 115, 115, 97, 103, 101, 0, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 3, 4, 0, 6, 118, 101, 114, 105, 102, 121, 1, 4, 4, 1, 40, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 101, 100, 119, 97, 114, 100, 115, 45, 119, 105, 116, 47, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 64, 48, 46, 49, 46, 48, 5, 0, 11, 16, 1, 0, 10, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 3, 0, 0, 7, 164, 3, 1, 65, 2, 1, 65, 7, 1, 66, 4, 1, 112, 125, 1, 107, 0, 1, 114, 3, 8, 117, 115, 101, 114, 110, 97, 109, 101, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 2, 3, 1, 30, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 1, 66, 10, 2, 3, 2, 1, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 0, 1, 106, 0, 1, 115, 1, 64, 1, 6, 99, 111, 110, 102, 105, 103, 1, 0, 2, 4, 0, 10, 115, 101, 116, 45, 99, 111, 110, 102, 105, 103, 1, 3, 1, 112, 125, 1, 106, 1, 4, 1, 115, 1, 64, 0, 0, 5, 4, 0, 13, 103, 101, 116, 45, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 6, 4, 0, 8, 103, 101, 116, 45, 115, 101, 101, 100, 1, 6, 3, 1, 31, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 102, 105, 103, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 7, 1, 112, 125, 1, 106, 1, 0, 1, 115, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 0, 0, 1, 4, 0, 4, 115, 105, 103, 110, 1, 2, 1, 106, 1, 127, 1, 115, 1, 64, 2, 7, 109, 101, 115, 115, 97, 103, 101, 0, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 3, 4, 0, 6, 118, 101, 114, 105, 102, 121, 1, 4, 4, 1, 40, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 101, 100, 119, 97, 114, 100, 115, 45, 119, 105, 116, 47, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 64, 48, 46, 49, 46, 48, 5, 3, 4, 1, 37, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 101, 100, 119, 97, 114, 100, 115, 45, 119, 105, 116, 47, 101, 120, 97, 109, 112, 108, 101, 64, 48, 46, 49, 46, 48, 4, 0, 11, 13, 1, 0, 7, 101, 120, 97, 109, 112, 108, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
