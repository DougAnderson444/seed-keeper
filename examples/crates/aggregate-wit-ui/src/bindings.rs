// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod example {
  pub mod edwards_ui {
    
    #[allow(clippy::all)]
    pub mod wurbo_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct Page {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("title", &self.title).finish()
        }
      }
      #[derive(Clone)]
      pub struct Input {
        pub placeholder: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Input {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Input").field("placeholder", &self.placeholder).finish()
        }
      }
      #[derive(Clone)]
      pub struct Output {
        /// the resulting value of the total outputs combined
        pub value: Option<wit_bindgen::rt::string::String>,
        /// optional id string: None is intial render, Some for update value
        pub id: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the message changes
        pub message: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the signature changes
        pub signature: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Output {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Output").field("value", &self.value).field("id", &self.id).field("message", &self.message).field("signature", &self.signature).finish()
        }
      }
      /// COntent for the entire page
      #[derive(Clone)]
      pub struct Content {
        pub page: Page,
        pub input: Input,
        pub output: Option<Output>,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("page", &self.page).field("input", &self.input).field("output", &self.output).finish()
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Message(wit_bindgen::rt::string::String),
        Submit(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Message(e) => {
              f.debug_tuple("Context::Message").field(e).finish()
            }
            Context::Submit(e) => {
              f.debug_tuple("Context::Submit").field(e).finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_out {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Context = super::super::super::example::edwards_ui::wurbo_types::Context;
      #[allow(unused_unsafe, clippy::all)]
      /// renders the initial Web component with the given data
      /// and the target template to use as top level entry point
      pub fn render(ctx: &Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 72]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;use super::super::super::example::edwards_ui::wurbo_types::Context as V13;
          match ctx {
            V13::AllContent(e) => {
              *((ptr0 + 0) as *mut u8) = (0i32) as u8;
              let super::super::super::example::edwards_ui::wurbo_types::Content{ page:page1, input:input1, output:output1, } = e;
              let super::super::super::example::edwards_ui::wurbo_types::Page{ title:title2, } = page1;
              let vec3 = title2;
              let ptr3 = vec3.as_ptr() as i32;
              let len3 = vec3.len() as i32;
              *((ptr0 + 8) as *mut i32) = len3;
              *((ptr0 + 4) as *mut i32) = ptr3;
              let super::super::super::example::edwards_ui::wurbo_types::Input{ placeholder:placeholder4, } = input1;
              let vec5 = placeholder4;
              let ptr5 = vec5.as_ptr() as i32;
              let len5 = vec5.len() as i32;
              *((ptr0 + 16) as *mut i32) = len5;
              *((ptr0 + 12) as *mut i32) = ptr5;
              match output1 {
                Some(e) => {
                  *((ptr0 + 20) as *mut u8) = (1i32) as u8;
                  let super::super::super::example::edwards_ui::wurbo_types::Output{ value:value6, id:id6, message:message6, signature:signature6, } = e;
                  match value6 {
                    Some(e) => {
                      *((ptr0 + 24) as *mut u8) = (1i32) as u8;
                      let vec7 = e;
                      let ptr7 = vec7.as_ptr() as i32;
                      let len7 = vec7.len() as i32;
                      *((ptr0 + 32) as *mut i32) = len7;
                      *((ptr0 + 28) as *mut i32) = ptr7;
                    },
                    None => {
                      {
                        *((ptr0 + 24) as *mut u8) = (0i32) as u8;
                      }
                    },
                  };match id6 {
                    Some(e) => {
                      *((ptr0 + 36) as *mut u8) = (1i32) as u8;
                      let vec8 = e;
                      let ptr8 = vec8.as_ptr() as i32;
                      let len8 = vec8.len() as i32;
                      *((ptr0 + 44) as *mut i32) = len8;
                      *((ptr0 + 40) as *mut i32) = ptr8;
                    },
                    None => {
                      {
                        *((ptr0 + 36) as *mut u8) = (0i32) as u8;
                      }
                    },
                  };match message6 {
                    Some(e) => {
                      *((ptr0 + 48) as *mut u8) = (1i32) as u8;
                      let vec9 = e;
                      let ptr9 = vec9.as_ptr() as i32;
                      let len9 = vec9.len() as i32;
                      *((ptr0 + 56) as *mut i32) = len9;
                      *((ptr0 + 52) as *mut i32) = ptr9;
                    },
                    None => {
                      {
                        *((ptr0 + 48) as *mut u8) = (0i32) as u8;
                      }
                    },
                  };match signature6 {
                    Some(e) => {
                      *((ptr0 + 60) as *mut u8) = (1i32) as u8;
                      let vec10 = e;
                      let ptr10 = vec10.as_ptr() as i32;
                      let len10 = vec10.len() as i32;
                      *((ptr0 + 68) as *mut i32) = len10;
                      *((ptr0 + 64) as *mut i32) = ptr10;
                    },
                    None => {
                      {
                        *((ptr0 + 60) as *mut u8) = (0i32) as u8;
                      }
                    },
                  };},
                  None => {
                    {
                      *((ptr0 + 20) as *mut u8) = (0i32) as u8;
                    }
                  },
                };},
                V13::Message(e) => {
                  *((ptr0 + 0) as *mut u8) = (1i32) as u8;
                  let vec11 = e;
                  let ptr11 = vec11.as_ptr() as i32;
                  let len11 = vec11.len() as i32;
                  *((ptr0 + 8) as *mut i32) = len11;
                  *((ptr0 + 4) as *mut i32) = ptr11;
                },
                V13::Submit(e) => {
                  *((ptr0 + 0) as *mut u8) = (2i32) as u8;
                  let vec12 = e;
                  let ptr12 = vec12.as_ptr() as i32;
                  let len12 = vec12.len() as i32;
                  *((ptr0 + 8) as *mut i32) = len12;
                  *((ptr0 + 4) as *mut i32) = ptr12;
                },
              }
              let ptr14 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "example:edwards-ui/wurbo-out@0.1.0")]
              extern "C" {
                #[link_name = "render"]
                fn wit_import(_: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, ){ unreachable!() }
              wit_import(ptr0, ptr14);
              let l15 = i32::from(*((ptr14 + 0) as *const u8));
              match l15 {
                0 => {
                  let e = {
                    let l16 = *((ptr14 + 4) as *const i32);
                    let l17 = *((ptr14 + 8) as *const i32);
                    let len18 = l17 as usize;
                    let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                    
                    wit_bindgen::rt::string_lift(bytes18)
                  };
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l19 = *((ptr14 + 4) as *const i32);
                    let l20 = *((ptr14 + 8) as *const i32);
                    let len21 = l20 as usize;
                    let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                    
                    wit_bindgen::rt::string_lift(bytes21)
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
          #[allow(unused_unsafe, clippy::all)]
          /// listen on all or given selectors
          pub fn activate(selectors: Option<&[wit_bindgen::rt::string::String]>,){
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              let mut cleanup_list = Vec::new();
              let (result2_0,result2_1,result2_2,) = match selectors {
                Some(e) => {
                  let vec1 = e;
                  let len1 = vec1.len() as i32;
                  let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                  let result1 = if layout1.size() != 0
                  {
                    let ptr = alloc::alloc(layout1);
                    if ptr.is_null()
                    {
                      alloc::handle_alloc_error(layout1);
                    }
                    ptr
                  }else {{
                    ::core::ptr::null_mut()
                  }};
                  for (i, e) in vec1.into_iter().enumerate() {
                    let base = result1 as i32 + (i as i32) * 8;
                    {
                      let vec0 = e;
                      let ptr0 = vec0.as_ptr() as i32;
                      let len0 = vec0.len() as i32;
                      *((base + 4) as *mut i32) = len0;
                      *((base + 0) as *mut i32) = ptr0;
                    }
                  }
                  cleanup_list.extend_from_slice(&[(result1, layout1),]);
                  
                  (1i32, result1 as i32, len1)
                },
                None => {
                  (0i32, 0i32, 0i32)
                },
              };
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "example:edwards-ui/wurbo-out@0.1.0")]
              extern "C" {
                #[link_name = "activate"]
                fn wit_import(_: i32, _: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
              wit_import(result2_0, result2_1, result2_2);
              for (ptr, layout) in cleanup_list {
                
                if layout.size() != 0 {
                  
                  alloc::dealloc(ptr, layout);
                  
                }
                
              }
            }
          }
          
        }
        
      }
    }
    pub mod seed_keeper {
      pub mod wit_ui {
        
        #[allow(clippy::all)]
        pub mod wurbo_types {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type Encrypted = wit_bindgen::rt::string::String;
          /// Details required in order to add an event listener to an element
          #[derive(Clone)]
          pub struct ListenDetails {
            pub selector: wit_bindgen::rt::string::String,
            pub ty: wit_bindgen::rt::string::String,
          }
          impl ::core::fmt::Debug for ListenDetails {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
            }
          }
          /// Context for the minijinja rendering
          #[derive(Clone)]
          pub struct Page {
            pub title: wit_bindgen::rt::string::String,
          }
          impl ::core::fmt::Debug for Page {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("Page").field("title", &self.title).finish()
            }
          }
          #[derive(Clone)]
          pub struct Input {
            pub placeholder: wit_bindgen::rt::string::String,
          }
          impl ::core::fmt::Debug for Input {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("Input").field("placeholder", &self.placeholder).finish()
            }
          }
          /// Content for the entire page
          #[derive(Clone)]
          pub struct Content {
            pub page: Option<Page>,
            pub input: Option<Input>,
            pub load: Option<wit_bindgen::rt::string::String>,
          }
          impl ::core::fmt::Debug for Content {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("Content").field("page", &self.page).field("input", &self.input).field("load", &self.load).finish()
            }
          }
          /// Context variants
          #[derive(Clone)]
          pub enum Context{
            AllContent(Content),
            Username(wit_bindgen::rt::string::String),
            Password(wit_bindgen::rt::string::String),
            Encrypted(Encrypted),
            Submit,
          }
          impl ::core::fmt::Debug for Context {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              match self {
                Context::AllContent(e) => {
                  f.debug_tuple("Context::AllContent").field(e).finish()
                }
                Context::Username(e) => {
                  f.debug_tuple("Context::Username").field(e).finish()
                }
                Context::Password(e) => {
                  f.debug_tuple("Context::Password").field(e).finish()
                }
                Context::Encrypted(e) => {
                  f.debug_tuple("Context::Encrypted").field(e).finish()
                }
                Context::Submit => {
                  f.debug_tuple("Context::Submit").finish()
                }
              }
            }
          }
          
        }
        
        
        #[allow(clippy::all)]
        pub mod wurbo_out {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type Context = super::super::super::seed_keeper::wit_ui::wurbo_types::Context;
          #[allow(unused_unsafe, clippy::all)]
          /// renders the initial Web component with the given data
          /// and the target template to use as top level entry point
          pub fn render(ctx: &Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[repr(align(4))]
              struct RetArea([u8; 12]);
              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
              use super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V12;
              let (result13_0,result13_1,result13_2,result13_3,result13_4,result13_5,result13_6,result13_7,result13_8,result13_9,) = match ctx {
                V12::AllContent(e) => {
                  let super::super::super::seed_keeper::wit_ui::wurbo_types::Content{ page:page0, input:input0, load:load0, } = e;
                  let (result3_0,result3_1,result3_2,) = match page0 {
                    Some(e) => {
                      let super::super::super::seed_keeper::wit_ui::wurbo_types::Page{ title:title1, } = e;
                      let vec2 = title1;
                      let ptr2 = vec2.as_ptr() as i32;
                      let len2 = vec2.len() as i32;
                      
                      (1i32, ptr2, len2)
                    },
                    None => {
                      (0i32, 0i32, 0i32)
                    },
                  };let (result6_0,result6_1,result6_2,) = match input0 {
                    Some(e) => {
                      let super::super::super::seed_keeper::wit_ui::wurbo_types::Input{ placeholder:placeholder4, } = e;
                      let vec5 = placeholder4;
                      let ptr5 = vec5.as_ptr() as i32;
                      let len5 = vec5.len() as i32;
                      
                      (1i32, ptr5, len5)
                    },
                    None => {
                      (0i32, 0i32, 0i32)
                    },
                  };let (result8_0,result8_1,result8_2,) = match load0 {
                    Some(e) => {
                      let vec7 = e;
                      let ptr7 = vec7.as_ptr() as i32;
                      let len7 = vec7.len() as i32;
                      
                      (1i32, ptr7, len7)
                    },
                    None => {
                      (0i32, 0i32, 0i32)
                    },
                  };
                  (0i32, result3_0, result3_1, result3_2, result6_0, result6_1, result6_2, result8_0, result8_1, result8_2)
                },
                V12::Username(e) => {
                  let vec9 = e;
                  let ptr9 = vec9.as_ptr() as i32;
                  let len9 = vec9.len() as i32;
                  
                  (1i32, ptr9, len9, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                },
                V12::Password(e) => {
                  let vec10 = e;
                  let ptr10 = vec10.as_ptr() as i32;
                  let len10 = vec10.len() as i32;
                  
                  (2i32, ptr10, len10, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                },
                V12::Encrypted(e) => {
                  let vec11 = e;
                  let ptr11 = vec11.as_ptr() as i32;
                  let len11 = vec11.len() as i32;
                  
                  (3i32, ptr11, len11, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                },
                V12::Submit=> {
                  (4i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                }
              };
              let ptr14 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
              extern "C" {
                #[link_name = "render"]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
              wit_import(result13_0, result13_1, result13_2, result13_3, result13_4, result13_5, result13_6, result13_7, result13_8, result13_9, ptr14);
              let l15 = i32::from(*((ptr14 + 0) as *const u8));
              match l15 {
                0 => {
                  let e = {
                    let l16 = *((ptr14 + 4) as *const i32);
                    let l17 = *((ptr14 + 8) as *const i32);
                    let len18 = l17 as usize;
                    let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                    
                    wit_bindgen::rt::string_lift(bytes18)
                  };
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l19 = *((ptr14 + 4) as *const i32);
                    let l20 = *((ptr14 + 8) as *const i32);
                    let len21 = l20 as usize;
                    let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                    
                    wit_bindgen::rt::string_lift(bytes21)
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
          #[allow(unused_unsafe, clippy::all)]
          /// listen on all or given selectors
          pub fn activate(selectors: Option<&[wit_bindgen::rt::string::String]>,){
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              let mut cleanup_list = Vec::new();
              let (result2_0,result2_1,result2_2,) = match selectors {
                Some(e) => {
                  let vec1 = e;
                  let len1 = vec1.len() as i32;
                  let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                  let result1 = if layout1.size() != 0
                  {
                    let ptr = alloc::alloc(layout1);
                    if ptr.is_null()
                    {
                      alloc::handle_alloc_error(layout1);
                    }
                    ptr
                  }else {{
                    ::core::ptr::null_mut()
                  }};
                  for (i, e) in vec1.into_iter().enumerate() {
                    let base = result1 as i32 + (i as i32) * 8;
                    {
                      let vec0 = e;
                      let ptr0 = vec0.as_ptr() as i32;
                      let len0 = vec0.len() as i32;
                      *((base + 4) as *mut i32) = len0;
                      *((base + 0) as *mut i32) = ptr0;
                    }
                  }
                  cleanup_list.extend_from_slice(&[(result1, layout1),]);
                  
                  (1i32, result1 as i32, len1)
                },
                None => {
                  (0i32, 0i32, 0i32)
                },
              };
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
              extern "C" {
                #[link_name = "activate"]
                fn wit_import(_: i32, _: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
              wit_import(result2_0, result2_1, result2_2);
              for (ptr, layout) in cleanup_list {
                
                if layout.size() != 0 {
                  
                  alloc::dealloc(ptr, layout);
                  
                }
                
              }
            }
          }
          
        }
        
      }
    }
    pub mod wallet {
      pub mod aggregate_wit_ui {
        
        #[allow(clippy::all)]
        pub mod wurbo_types {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type EdwardsContext = super::super::super::example::edwards_ui::wurbo_out::Context;
          pub type SeedContext = super::super::super::seed_keeper::wit_ui::wurbo_out::Context;
          /// Details required in order to add an event listener to an element
          #[derive(Clone)]
          pub struct ListenDetails {
            pub selector: wit_bindgen::rt::string::String,
            pub ty: wit_bindgen::rt::string::String,
          }
          impl ::core::fmt::Debug for ListenDetails {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
            }
          }
          /// Context for the minijinja rendering
          #[derive(Clone)]
          pub struct App {
            pub title: wit_bindgen::rt::string::String,
          }
          impl ::core::fmt::Debug for App {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("App").field("title", &self.title).finish()
            }
          }
          /// Content record for the initial content of the entire app
          #[derive(Clone)]
          pub struct Content {
            /// pass in props like title, etc.
            pub app: App,
            /// optionally pass in an encrypted seed to load
            pub seed_ui: SeedContext,
            /// optionally pass in a message to sign or verify
            pub edwards_ui: EdwardsContext,
          }
          impl ::core::fmt::Debug for Content {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("Content").field("app", &self.app).field("seed-ui", &self.seed_ui).field("edwards-ui", &self.edwards_ui).finish()
            }
          }
          /// Context variants
          #[derive(Clone)]
          pub enum Context{
            AllContent(Content),
            Seed(SeedContext),
            Edwards(EdwardsContext),
          }
          impl ::core::fmt::Debug for Context {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              match self {
                Context::AllContent(e) => {
                  f.debug_tuple("Context::AllContent").field(e).finish()
                }
                Context::Seed(e) => {
                  f.debug_tuple("Context::Seed").field(e).finish()
                }
                Context::Edwards(e) => {
                  f.debug_tuple("Context::Edwards").field(e).finish()
                }
              }
            }
          }
          
        }
        
        
        #[allow(clippy::all)]
        pub mod wurbo_in {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type ListenDetails = super::super::super::wallet::aggregate_wit_ui::wurbo_types::ListenDetails;
          #[allow(unused_unsafe, clippy::all)]
          /// Add an event listener to the given element
          pub fn addeventlistener(details: &ListenDetails,){
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              let super::super::super::wallet::aggregate_wit_ui::wurbo_types::ListenDetails{ selector:selector0, ty:ty0, } = details;
              let vec1 = selector0;
              let ptr1 = vec1.as_ptr() as i32;
              let len1 = vec1.len() as i32;
              let vec2 = ty0;
              let ptr2 = vec2.as_ptr() as i32;
              let len2 = vec2.len() as i32;
              
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wallet:aggregate-wit-ui/wurbo-in@0.1.0")]
              extern "C" {
                #[link_name = "addeventlistener"]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
              wit_import(ptr1, len1, ptr2, len2);
            }
          }
          
        }
        
      }
    }
    pub mod exports {
      pub mod wallet {
        pub mod aggregate_wit_ui {
          
          #[allow(clippy::all)]
          pub mod wurbo_out {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
            pub type Context = super::super::super::super::wallet::aggregate_wit_ui::wurbo_types::Context;
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "wallet:aggregate-wit-ui/wurbo-out@0.1.0#render"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_render(arg0: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let l0 = i32::from(*((arg0 + 0) as *const u8));
                use super::super::super::super::wallet::aggregate_wit_ui::wurbo_types::Context as V112;
                let v112 = match l0 {
                  0 => {
                    let e112 = {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let len3 = l2 as usize;
                      let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                      let l4 = i32::from(*((arg0 + 12) as *const u8));
                      use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V26;
                      let v26 = match l4 {
                        0 => {
                          let e26 = {
                            let l5 = i32::from(*((arg0 + 16) as *const u8));
                            let l9 = i32::from(*((arg0 + 28) as *const u8));
                            let l13 = i32::from(*((arg0 + 40) as *const u8));
                            
                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                              page: match l5 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l6 = *((arg0 + 20) as *const i32);
                                    let l7 = *((arg0 + 24) as *const i32);
                                    let len8 = l7 as usize;
                                    let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                                    
                                    super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                                      title: wit_bindgen::rt::string_lift(bytes8),
                                    }
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                              input: match l9 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l10 = *((arg0 + 32) as *const i32);
                                    let l11 = *((arg0 + 36) as *const i32);
                                    let len12 = l11 as usize;
                                    let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                                    
                                    super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                                      placeholder: wit_bindgen::rt::string_lift(bytes12),
                                    }
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                              load: match l13 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l14 = *((arg0 + 44) as *const i32);
                                    let l15 = *((arg0 + 48) as *const i32);
                                    let len16 = l15 as usize;
                                    let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                                    
                                    wit_bindgen::rt::string_lift(bytes16)
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                            }
                          };
                          V26::AllContent(e26)
                        }
                        1 => {
                          let e26 = {
                            let l17 = *((arg0 + 16) as *const i32);
                            let l18 = *((arg0 + 20) as *const i32);
                            let len19 = l18 as usize;
                            let bytes19 = Vec::from_raw_parts(l17 as *mut _, len19, len19);
                            
                            wit_bindgen::rt::string_lift(bytes19)
                          };
                          V26::Username(e26)
                        }
                        2 => {
                          let e26 = {
                            let l20 = *((arg0 + 16) as *const i32);
                            let l21 = *((arg0 + 20) as *const i32);
                            let len22 = l21 as usize;
                            let bytes22 = Vec::from_raw_parts(l20 as *mut _, len22, len22);
                            
                            wit_bindgen::rt::string_lift(bytes22)
                          };
                          V26::Password(e26)
                        }
                        3 => {
                          let e26 = {
                            let l23 = *((arg0 + 16) as *const i32);
                            let l24 = *((arg0 + 20) as *const i32);
                            let len25 = l24 as usize;
                            let bytes25 = Vec::from_raw_parts(l23 as *mut _, len25, len25);
                            
                            wit_bindgen::rt::string_lift(bytes25)
                          };
                          V26::Encrypted(e26)
                        }
                        n => {
                          debug_assert_eq!(n, 4, "invalid enum discriminant");
                          V26::Submit
                        }
                      };
                      let l27 = i32::from(*((arg0 + 52) as *const u8));
                      use super::super::super::super::example::edwards_ui::wurbo_types::Context as V57;
                      let v57 = match l27 {
                        0 => {
                          let e57 = {
                            let l28 = *((arg0 + 56) as *const i32);
                            let l29 = *((arg0 + 60) as *const i32);
                            let len30 = l29 as usize;
                            let bytes30 = Vec::from_raw_parts(l28 as *mut _, len30, len30);
                            let l31 = *((arg0 + 64) as *const i32);
                            let l32 = *((arg0 + 68) as *const i32);
                            let len33 = l32 as usize;
                            let bytes33 = Vec::from_raw_parts(l31 as *mut _, len33, len33);
                            let l34 = i32::from(*((arg0 + 72) as *const u8));
                            
                            super::super::super::super::example::edwards_ui::wurbo_types::Content{
                              page: super::super::super::super::example::edwards_ui::wurbo_types::Page{
                                title: wit_bindgen::rt::string_lift(bytes30),
                              },
                              input: super::super::super::super::example::edwards_ui::wurbo_types::Input{
                                placeholder: wit_bindgen::rt::string_lift(bytes33),
                              },
                              output: match l34 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l35 = i32::from(*((arg0 + 76) as *const u8));
                                    let l39 = i32::from(*((arg0 + 88) as *const u8));
                                    let l43 = i32::from(*((arg0 + 100) as *const u8));
                                    let l47 = i32::from(*((arg0 + 112) as *const u8));
                                    
                                    super::super::super::super::example::edwards_ui::wurbo_types::Output{
                                      value: match l35 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l36 = *((arg0 + 80) as *const i32);
                                            let l37 = *((arg0 + 84) as *const i32);
                                            let len38 = l37 as usize;
                                            let bytes38 = Vec::from_raw_parts(l36 as *mut _, len38, len38);
                                            
                                            wit_bindgen::rt::string_lift(bytes38)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                      id: match l39 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l40 = *((arg0 + 92) as *const i32);
                                            let l41 = *((arg0 + 96) as *const i32);
                                            let len42 = l41 as usize;
                                            let bytes42 = Vec::from_raw_parts(l40 as *mut _, len42, len42);
                                            
                                            wit_bindgen::rt::string_lift(bytes42)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                      message: match l43 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l44 = *((arg0 + 104) as *const i32);
                                            let l45 = *((arg0 + 108) as *const i32);
                                            let len46 = l45 as usize;
                                            let bytes46 = Vec::from_raw_parts(l44 as *mut _, len46, len46);
                                            
                                            wit_bindgen::rt::string_lift(bytes46)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                      signature: match l47 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l48 = *((arg0 + 116) as *const i32);
                                            let l49 = *((arg0 + 120) as *const i32);
                                            let len50 = l49 as usize;
                                            let bytes50 = Vec::from_raw_parts(l48 as *mut _, len50, len50);
                                            
                                            wit_bindgen::rt::string_lift(bytes50)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                    }
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                            }
                          };
                          V57::AllContent(e57)
                        }
                        1 => {
                          let e57 = {
                            let l51 = *((arg0 + 56) as *const i32);
                            let l52 = *((arg0 + 60) as *const i32);
                            let len53 = l52 as usize;
                            let bytes53 = Vec::from_raw_parts(l51 as *mut _, len53, len53);
                            
                            wit_bindgen::rt::string_lift(bytes53)
                          };
                          V57::Message(e57)
                        }
                        n => {
                          debug_assert_eq!(n, 2, "invalid enum discriminant");
                          let e57 = {
                            let l54 = *((arg0 + 56) as *const i32);
                            let l55 = *((arg0 + 60) as *const i32);
                            let len56 = l55 as usize;
                            let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                            
                            wit_bindgen::rt::string_lift(bytes56)
                          };
                          V57::Submit(e57)
                        }
                      };
                      
                      super::super::super::super::wallet::aggregate_wit_ui::wurbo_types::Content{
                        app: super::super::super::super::wallet::aggregate_wit_ui::wurbo_types::App{
                          title: wit_bindgen::rt::string_lift(bytes3),
                        },
                        seed_ui: v26,
                        edwards_ui: v57,
                      }
                    };
                    V112::AllContent(e112)
                  }
                  1 => {
                    let e112 = {
                      let l58 = i32::from(*((arg0 + 4) as *const u8));
                      use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V80;
                      let v80 = match l58 {
                        0 => {
                          let e80 = {
                            let l59 = i32::from(*((arg0 + 8) as *const u8));
                            let l63 = i32::from(*((arg0 + 20) as *const u8));
                            let l67 = i32::from(*((arg0 + 32) as *const u8));
                            
                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                              page: match l59 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l60 = *((arg0 + 12) as *const i32);
                                    let l61 = *((arg0 + 16) as *const i32);
                                    let len62 = l61 as usize;
                                    let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                                    
                                    super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                                      title: wit_bindgen::rt::string_lift(bytes62),
                                    }
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                              input: match l63 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l64 = *((arg0 + 24) as *const i32);
                                    let l65 = *((arg0 + 28) as *const i32);
                                    let len66 = l65 as usize;
                                    let bytes66 = Vec::from_raw_parts(l64 as *mut _, len66, len66);
                                    
                                    super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                                      placeholder: wit_bindgen::rt::string_lift(bytes66),
                                    }
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                              load: match l67 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l68 = *((arg0 + 36) as *const i32);
                                    let l69 = *((arg0 + 40) as *const i32);
                                    let len70 = l69 as usize;
                                    let bytes70 = Vec::from_raw_parts(l68 as *mut _, len70, len70);
                                    
                                    wit_bindgen::rt::string_lift(bytes70)
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                            }
                          };
                          V80::AllContent(e80)
                        }
                        1 => {
                          let e80 = {
                            let l71 = *((arg0 + 8) as *const i32);
                            let l72 = *((arg0 + 12) as *const i32);
                            let len73 = l72 as usize;
                            let bytes73 = Vec::from_raw_parts(l71 as *mut _, len73, len73);
                            
                            wit_bindgen::rt::string_lift(bytes73)
                          };
                          V80::Username(e80)
                        }
                        2 => {
                          let e80 = {
                            let l74 = *((arg0 + 8) as *const i32);
                            let l75 = *((arg0 + 12) as *const i32);
                            let len76 = l75 as usize;
                            let bytes76 = Vec::from_raw_parts(l74 as *mut _, len76, len76);
                            
                            wit_bindgen::rt::string_lift(bytes76)
                          };
                          V80::Password(e80)
                        }
                        3 => {
                          let e80 = {
                            let l77 = *((arg0 + 8) as *const i32);
                            let l78 = *((arg0 + 12) as *const i32);
                            let len79 = l78 as usize;
                            let bytes79 = Vec::from_raw_parts(l77 as *mut _, len79, len79);
                            
                            wit_bindgen::rt::string_lift(bytes79)
                          };
                          V80::Encrypted(e80)
                        }
                        n => {
                          debug_assert_eq!(n, 4, "invalid enum discriminant");
                          V80::Submit
                        }
                      };
                      
                      v80
                    };
                    V112::Seed(e112)
                  }
                  n => {
                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                    let e112 = {
                      let l81 = i32::from(*((arg0 + 4) as *const u8));
                      use super::super::super::super::example::edwards_ui::wurbo_types::Context as V111;
                      let v111 = match l81 {
                        0 => {
                          let e111 = {
                            let l82 = *((arg0 + 8) as *const i32);
                            let l83 = *((arg0 + 12) as *const i32);
                            let len84 = l83 as usize;
                            let bytes84 = Vec::from_raw_parts(l82 as *mut _, len84, len84);
                            let l85 = *((arg0 + 16) as *const i32);
                            let l86 = *((arg0 + 20) as *const i32);
                            let len87 = l86 as usize;
                            let bytes87 = Vec::from_raw_parts(l85 as *mut _, len87, len87);
                            let l88 = i32::from(*((arg0 + 24) as *const u8));
                            
                            super::super::super::super::example::edwards_ui::wurbo_types::Content{
                              page: super::super::super::super::example::edwards_ui::wurbo_types::Page{
                                title: wit_bindgen::rt::string_lift(bytes84),
                              },
                              input: super::super::super::super::example::edwards_ui::wurbo_types::Input{
                                placeholder: wit_bindgen::rt::string_lift(bytes87),
                              },
                              output: match l88 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l89 = i32::from(*((arg0 + 28) as *const u8));
                                    let l93 = i32::from(*((arg0 + 40) as *const u8));
                                    let l97 = i32::from(*((arg0 + 52) as *const u8));
                                    let l101 = i32::from(*((arg0 + 64) as *const u8));
                                    
                                    super::super::super::super::example::edwards_ui::wurbo_types::Output{
                                      value: match l89 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l90 = *((arg0 + 32) as *const i32);
                                            let l91 = *((arg0 + 36) as *const i32);
                                            let len92 = l91 as usize;
                                            let bytes92 = Vec::from_raw_parts(l90 as *mut _, len92, len92);
                                            
                                            wit_bindgen::rt::string_lift(bytes92)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                      id: match l93 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l94 = *((arg0 + 44) as *const i32);
                                            let l95 = *((arg0 + 48) as *const i32);
                                            let len96 = l95 as usize;
                                            let bytes96 = Vec::from_raw_parts(l94 as *mut _, len96, len96);
                                            
                                            wit_bindgen::rt::string_lift(bytes96)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                      message: match l97 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l98 = *((arg0 + 56) as *const i32);
                                            let l99 = *((arg0 + 60) as *const i32);
                                            let len100 = l99 as usize;
                                            let bytes100 = Vec::from_raw_parts(l98 as *mut _, len100, len100);
                                            
                                            wit_bindgen::rt::string_lift(bytes100)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                      signature: match l101 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l102 = *((arg0 + 68) as *const i32);
                                            let l103 = *((arg0 + 72) as *const i32);
                                            let len104 = l103 as usize;
                                            let bytes104 = Vec::from_raw_parts(l102 as *mut _, len104, len104);
                                            
                                            wit_bindgen::rt::string_lift(bytes104)
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      },
                                    }
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              },
                            }
                          };
                          V111::AllContent(e111)
                        }
                        1 => {
                          let e111 = {
                            let l105 = *((arg0 + 8) as *const i32);
                            let l106 = *((arg0 + 12) as *const i32);
                            let len107 = l106 as usize;
                            let bytes107 = Vec::from_raw_parts(l105 as *mut _, len107, len107);
                            
                            wit_bindgen::rt::string_lift(bytes107)
                          };
                          V111::Message(e111)
                        }
                        n => {
                          debug_assert_eq!(n, 2, "invalid enum discriminant");
                          let e111 = {
                            let l108 = *((arg0 + 8) as *const i32);
                            let l109 = *((arg0 + 12) as *const i32);
                            let len110 = l109 as usize;
                            let bytes110 = Vec::from_raw_parts(l108 as *mut _, len110, len110);
                            
                            wit_bindgen::rt::string_lift(bytes110)
                          };
                          V111::Submit(e111)
                        }
                      };
                      
                      v111
                    };
                    V112::Edwards(e112)
                  }
                };
                let result113 = <_GuestImpl as Guest>::render(v112);
                wit_bindgen::rt::dealloc(arg0, 124, 4);
                let ptr114 = _RET_AREA.0.as_mut_ptr() as i32;
                match result113 {
                  Ok(e) => { {
                    *((ptr114 + 0) as *mut u8) = (0i32) as u8;
                    let vec115 = (e.into_bytes()).into_boxed_slice();
                    let ptr115 = vec115.as_ptr() as i32;
                    let len115 = vec115.len() as i32;
                    ::core::mem::forget(vec115);
                    *((ptr114 + 8) as *mut i32) = len115;
                    *((ptr114 + 4) as *mut i32) = ptr115;
                  } },
                  Err(e) => { {
                    *((ptr114 + 0) as *mut u8) = (1i32) as u8;
                    let vec116 = (e.into_bytes()).into_boxed_slice();
                    let ptr116 = vec116.as_ptr() as i32;
                    let len116 = vec116.len() as i32;
                    ::core::mem::forget(vec116);
                    *((ptr114 + 8) as *mut i32) = len116;
                    *((ptr114 + 4) as *mut i32) = ptr116;
                  } },
                };ptr114
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_wallet:aggregate-wit-ui/wurbo-out@0.1.0#render"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_render(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                    _ => {
                      let l3 = *((arg0 + 4) as *const i32);
                      let l4 = *((arg0 + 8) as *const i32);
                      wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "wallet:aggregate-wit-ui/wurbo-out@0.1.0#activate"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_activate(arg0: i32,arg1: i32,arg2: i32,) {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                <_GuestImpl as Guest>::activate(match arg0 {
                  0 => None,
                  1 => {
                    let e = {
                      let base3 = arg1;
                      let len3 = arg2;
                      let mut result3 = Vec::with_capacity(len3 as usize);
                      for i in 0..len3 {
                        let base = base3 + i * 8;
                        let e3 = {
                          let l0 = *((base + 0) as *const i32);
                          let l1 = *((base + 4) as *const i32);
                          let len2 = l1 as usize;
                          let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                          
                          wit_bindgen::rt::string_lift(bytes2)
                        };
                        result3.push(e3);
                      }
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                      
                      result3
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                });
              }
            };
            use super::super::super::super::super::Component as _GuestImpl;
            pub trait Guest {
              /// renders the initial Web component with the given data
              fn render(ctx: Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
              /// listen on all or given selectors
              fn activate(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
            }
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            #[repr(align(4))]
            struct _RetArea([u8; 12]);
            static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
            
          }
          
          
          #[allow(clippy::all)]
          pub mod aggregation {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "wallet:aggregate-wit-ui/aggregation@0.1.0#activates"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_activates(arg0: i32,arg1: i32,arg2: i32,) {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                <_GuestImpl as Guest>::activates(match arg0 {
                  0 => None,
                  1 => {
                    let e = {
                      let base3 = arg1;
                      let len3 = arg2;
                      let mut result3 = Vec::with_capacity(len3 as usize);
                      for i in 0..len3 {
                        let base = base3 + i * 8;
                        let e3 = {
                          let l0 = *((base + 0) as *const i32);
                          let l1 = *((base + 4) as *const i32);
                          let len2 = l1 as usize;
                          let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                          
                          wit_bindgen::rt::string_lift(bytes2)
                        };
                        result3.push(e3);
                      }
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                      
                      result3
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                });
              }
            };
            use super::super::super::super::super::Component as _GuestImpl;
            pub trait Guest {
              /// calls activate on on the child components
              fn activates(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
            }
            
          }
          
        }
      }
    }
    
    #[cfg(target_arch = "wasm32")]
    #[link_section = "component-type:agg"]
    #[doc(hidden)]
    pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 5851] = [3, 0, 3, 97, 103, 103, 0, 97, 115, 109, 13, 0, 1, 0, 7, 184, 7, 1, 65, 14, 1, 66, 14, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 107, 115, 1, 114, 4, 5, 118, 97, 108, 117, 101, 6, 2, 105, 100, 6, 7, 109, 101, 115, 115, 97, 103, 101, 6, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 6, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 7, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 9, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 10, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 11, 0, 7, 109, 101, 115, 115, 97, 103, 101, 1, 115, 0, 6, 115, 117, 98, 109, 105, 116, 1, 115, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 12, 3, 1, 36, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 6, 1, 107, 5, 1, 107, 7, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 8, 5, 105, 110, 112, 117, 116, 9, 4, 108, 111, 97, 100, 10, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 12, 2, 3, 2, 1, 6, 4, 0, 15, 101, 100, 119, 97, 114, 100, 115, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 3, 10, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 1, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 3, 0, 7, 101, 100, 119, 97, 114, 100, 115, 1, 1, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 10, 4, 1, 41, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 11, 17, 1, 0, 11, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 3, 0, 0, 7, 88, 1, 65, 2, 1, 66, 4, 1, 112, 115, 1, 107, 0, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 1, 1, 0, 4, 0, 9, 97, 99, 116, 105, 118, 97, 116, 101, 115, 1, 2, 4, 1, 41, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 64, 48, 46, 49, 46, 48, 5, 0, 11, 17, 1, 0, 11, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 3, 2, 0, 7, 181, 8, 1, 65, 17, 1, 66, 14, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 107, 115, 1, 114, 4, 5, 118, 97, 108, 117, 101, 6, 2, 105, 100, 6, 7, 109, 101, 115, 115, 97, 103, 101, 6, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 6, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 7, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 9, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 10, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 11, 0, 7, 109, 101, 115, 115, 97, 103, 101, 1, 115, 0, 6, 115, 117, 98, 109, 105, 116, 1, 115, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 12, 3, 1, 36, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 6, 1, 107, 5, 1, 107, 7, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 8, 5, 105, 110, 112, 117, 116, 9, 4, 108, 111, 97, 100, 10, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 12, 2, 3, 2, 1, 6, 4, 0, 15, 101, 100, 119, 97, 114, 100, 115, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 3, 10, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 1, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 3, 0, 7, 101, 100, 119, 97, 114, 100, 115, 1, 1, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 10, 3, 1, 41, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 4, 2, 3, 2, 1, 9, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 4, 1, 38, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 10, 11, 14, 1, 0, 8, 119, 117, 114, 98, 111, 45, 105, 110, 3, 4, 0, 7, 195, 8, 1, 65, 17, 1, 66, 14, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 107, 115, 1, 114, 4, 5, 118, 97, 108, 117, 101, 6, 2, 105, 100, 6, 7, 109, 101, 115, 115, 97, 103, 101, 6, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 6, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 7, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 9, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 10, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 11, 0, 7, 109, 101, 115, 115, 97, 103, 101, 1, 115, 0, 6, 115, 117, 98, 109, 105, 116, 1, 115, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 12, 3, 1, 36, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 6, 1, 107, 5, 1, 107, 7, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 8, 5, 105, 110, 112, 117, 116, 9, 4, 108, 111, 97, 100, 10, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 12, 2, 3, 2, 1, 6, 4, 0, 15, 101, 100, 119, 97, 114, 100, 115, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 3, 10, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 1, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 3, 0, 7, 101, 100, 119, 97, 114, 100, 115, 1, 1, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 10, 3, 1, 41, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 9, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 39, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 10, 11, 15, 1, 0, 9, 119, 117, 114, 98, 111, 45, 111, 117, 116, 3, 6, 0, 7, 186, 11, 1, 65, 2, 1, 65, 22, 1, 66, 14, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 107, 115, 1, 114, 4, 5, 118, 97, 108, 117, 101, 6, 2, 105, 100, 6, 7, 109, 101, 115, 115, 97, 103, 101, 6, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 6, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 7, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 9, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 10, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 11, 0, 7, 109, 101, 115, 115, 97, 103, 101, 1, 115, 0, 6, 115, 117, 98, 109, 105, 116, 1, 115, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 12, 3, 1, 36, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 3, 1, 34, 101, 120, 97, 109, 112, 108, 101, 58, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 6, 1, 107, 5, 1, 107, 7, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 8, 5, 105, 110, 112, 117, 116, 9, 4, 108, 111, 97, 100, 10, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 12, 2, 3, 2, 1, 6, 4, 0, 15, 101, 100, 119, 97, 114, 100, 115, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 3, 10, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 1, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 3, 0, 7, 101, 100, 119, 97, 114, 100, 115, 1, 1, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 10, 3, 1, 41, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 4, 2, 3, 2, 1, 9, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 3, 1, 38, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 10, 2, 3, 0, 4, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 11, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 39, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 12, 1, 66, 4, 1, 112, 115, 1, 107, 0, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 1, 1, 0, 4, 0, 9, 97, 99, 116, 105, 118, 97, 116, 101, 115, 1, 2, 4, 1, 41, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 64, 48, 46, 49, 46, 48, 5, 13, 4, 1, 33, 119, 97, 108, 108, 101, 116, 58, 97, 103, 103, 114, 101, 103, 97, 116, 101, 45, 119, 105, 116, 45, 117, 105, 47, 97, 103, 103, 64, 48, 46, 49, 46, 48, 4, 0, 11, 9, 1, 0, 3, 97, 103, 103, 3, 8, 0, 0, 224, 7, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 100, 111, 99, 115, 34, 58, 34, 78, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 100, 101, 112, 115, 32, 99, 97, 110, 32, 104, 97, 118, 101, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 112, 97, 99, 107, 97, 103, 101, 32, 110, 97, 109, 101, 32, 97, 115, 32, 116, 104, 105, 115, 32, 112, 97, 99, 107, 97, 103, 101, 44, 32, 105, 116, 32, 99, 111, 110, 102, 108, 105, 99, 116, 115, 46, 32, 83, 111, 32, 119, 101, 32, 110, 101, 101, 100, 32, 116, 111, 32, 107, 101, 101, 112, 32, 99, 104, 97, 110, 103, 105, 110, 103, 32, 110, 97, 109, 101, 115, 112, 97, 99, 101, 115, 46, 34, 44, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 97, 103, 103, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 101, 120, 97, 109, 112, 108, 101, 32, 119, 111, 114, 108, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 46, 34, 125, 125, 44, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 116, 97, 105, 108, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 97, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 44, 34, 97, 112, 112, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 105, 110, 105, 106, 105, 110, 106, 97, 32, 114, 101, 110, 100, 101, 114, 105, 110, 103, 34, 125, 44, 34, 99, 111, 110, 116, 101, 110, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 110, 116, 32, 114, 101, 99, 111, 114, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 99, 111, 110, 116, 101, 110, 116, 32, 111, 102, 32, 116, 104, 101, 32, 101, 110, 116, 105, 114, 101, 32, 97, 112, 112, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 97, 112, 112, 34, 58, 34, 112, 97, 115, 115, 32, 105, 110, 32, 112, 114, 111, 112, 115, 32, 108, 105, 107, 101, 32, 116, 105, 116, 108, 101, 44, 32, 101, 116, 99, 46, 34, 44, 34, 115, 101, 101, 100, 45, 117, 105, 34, 58, 34, 111, 112, 116, 105, 111, 110, 97, 108, 108, 121, 32, 112, 97, 115, 115, 32, 105, 110, 32, 97, 110, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 115, 101, 101, 100, 32, 116, 111, 32, 108, 111, 97, 100, 34, 44, 34, 101, 100, 119, 97, 114, 100, 115, 45, 117, 105, 34, 58, 34, 111, 112, 116, 105, 111, 110, 97, 108, 108, 121, 32, 112, 97, 115, 115, 32, 105, 110, 32, 97, 32, 109, 101, 115, 115, 97, 103, 101, 32, 116, 111, 32, 115, 105, 103, 110, 32, 111, 114, 32, 118, 101, 114, 105, 102, 121, 34, 125, 125, 44, 34, 99, 111, 110, 116, 101, 120, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 118, 97, 114, 105, 97, 110, 116, 115, 34, 125, 125, 125, 44, 34, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 99, 116, 105, 118, 97, 116, 101, 115, 34, 58, 34, 99, 97, 108, 108, 115, 32, 97, 99, 116, 105, 118, 97, 116, 101, 32, 111, 110, 32, 111, 110, 32, 116, 104, 101, 32, 99, 104, 105, 108, 100, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 105, 110, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 34, 58, 34, 65, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 111, 117, 116, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 114, 101, 110, 100, 101, 114, 34, 58, 34, 114, 101, 110, 100, 101, 114, 115, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 87, 101, 98, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 100, 97, 116, 97, 34, 44, 34, 97, 99, 116, 105, 118, 97, 116, 101, 34, 58, 34, 108, 105, 115, 116, 101, 110, 32, 111, 110, 32, 97, 108, 108, 32, 111, 114, 32, 103, 105, 118, 101, 110, 32, 115, 101, 108, 101, 99, 116, 111, 114, 115, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
    
    #[inline(never)]
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    pub fn __link_section() {}
    