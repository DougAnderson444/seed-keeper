package seed-keeper:wallet@0.1.0;

interface types {
    /// The confuration of the seed keeper
    record credentials {
        /// The username to use for the seed keeper
        username: list<u8>,

        /// The password to use for the seed keeper
        password: list<u8>,

        /// Optional prevously generated encrypted seed to use for the seed keeper
        encrypted: option<list<u8>>
    }
}

interface seed-imports {
    /// Import the types interface
    use types.{credentials};

    /// Load into the component from an encrypted seed, password, and salt (username)
    /// Returns the encrypted seed or an error
    get-config: func() -> result<credentials, string>;
}

interface encrypted {
    /// Returns the encrypted seed or None if it doesn't exist
    get-encrypted: func() -> result<list<u8>, string>;
}

/// Exported interfaces of dependencies like seed keeper are not exported by the primary component
/// This keeps out seed safely out of the public API
interface seed-getter {
    /// Get the plaintext seed
    get-seed: func() -> result<list<u8>, string>;
}

/// An example world for the component to target.
world keeper {
    /// Import the seed interface
    import seed-imports;

    /// Export the seed interface
    export seed-getter;
    export encrypted;
}
