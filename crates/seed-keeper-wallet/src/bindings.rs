// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod seed_keeper {
  pub mod wallet {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// The confuration of the seed keeper
      #[derive(Clone)]
      pub struct Credentials {
        /// The username to use for the seed keeper
        pub username: wit_bindgen::rt::vec::Vec::<u8>,
        /// The password to use for the seed keeper
        pub password: wit_bindgen::rt::vec::Vec::<u8>,
        /// Optional prevously generated encrypted seed to use for the seed keeper
        pub encrypted: Option<wit_bindgen::rt::vec::Vec::<u8>>,
      }
      impl ::core::fmt::Debug for Credentials {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Credentials").field("username", &self.username).field("password", &self.password).field("encrypted", &self.encrypted).finish()
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod seed_keeper {
    pub mod wallet {
      
      #[allow(clippy::all)]
      pub mod config {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Credentials = super::super::super::super::seed_keeper::wallet::types::Credentials;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "seed-keeper:wallet/config@0.1.0#set-config"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_set_config(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let len1 = arg3 as usize;
            let result3 = <_GuestImpl as Guest>::set_config(super::super::super::super::seed_keeper::wallet::types::Credentials{
              username: Vec::from_raw_parts(arg0 as *mut _, len0, len0),
              password: Vec::from_raw_parts(arg2 as *mut _, len1, len1),
              encrypted: match arg4 {
                0 => None,
                1 => {
                  let e = {
                    let len2 = arg6 as usize;
                    
                    Vec::from_raw_parts(arg5 as *mut _, len2, len2)
                  };
                  Some(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              },
            });
            let ptr4 = _RET_AREA.0.as_mut_ptr() as i32;
            match result3 {
              Ok(_) => { {
                *((ptr4 + 0) as *mut u8) = (0i32) as u8;
              } },
              Err(e) => { {
                *((ptr4 + 0) as *mut u8) = (1i32) as u8;
                let vec5 = (e.into_bytes()).into_boxed_slice();
                let ptr5 = vec5.as_ptr() as i32;
                let len5 = vec5.len() as i32;
                ::core::mem::forget(vec5);
                *((ptr4 + 8) as *mut i32) = len5;
                *((ptr4 + 4) as *mut i32) = ptr5;
              } },
            };ptr4
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_seed-keeper:wallet/config@0.1.0#set-config"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_set_config(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => (),
                _ => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "seed-keeper:wallet/config@0.1.0#get-encrypted"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_encrypted() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_encrypted();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Ok(e) => { {
                *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                let vec2 = (e).into_boxed_slice();
                let ptr2 = vec2.as_ptr() as i32;
                let len2 = vec2.len() as i32;
                ::core::mem::forget(vec2);
                *((ptr1 + 8) as *mut i32) = len2;
                *((ptr1 + 4) as *mut i32) = ptr2;
              } },
              Err(e) => { {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr1 + 8) as *mut i32) = len3;
                *((ptr1 + 4) as *mut i32) = ptr3;
              } },
            };ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_seed-keeper:wallet/config@0.1.0#get-encrypted"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_encrypted(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  let base3 = l1;
                  let len3 = l2;
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                },
                _ => {
                  let l4 = *((arg0 + 4) as *const i32);
                  let l5 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "seed-keeper:wallet/config@0.1.0#get-seed"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_seed() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_seed();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Ok(e) => { {
                *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                let vec2 = (e).into_boxed_slice();
                let ptr2 = vec2.as_ptr() as i32;
                let len2 = vec2.len() as i32;
                ::core::mem::forget(vec2);
                *((ptr1 + 8) as *mut i32) = len2;
                *((ptr1 + 4) as *mut i32) = ptr2;
              } },
              Err(e) => { {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr1 + 8) as *mut i32) = len3;
                *((ptr1 + 4) as *mut i32) = ptr3;
              } },
            };ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_seed-keeper:wallet/config@0.1.0#get-seed"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_seed(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  let base3 = l1;
                  let len3 = l2;
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                },
                _ => {
                  let l4 = *((arg0 + 4) as *const i32);
                  let l5 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                },
              }
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// Load into the component from an encrypted seed, password, and salt (username)
          /// Returns the encrypted seed or an error
          fn set_config(config: Credentials,) -> Result<(),wit_bindgen::rt::string::String>;
          /// Returns the encrypted seed or None if it doesn't exist
          fn get_encrypted() -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>;
          /// Get the plaintext seed
          fn get_seed() -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:keeper"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1358] = [3, 0, 6, 107, 101, 101, 112, 101, 114, 0, 97, 115, 109, 13, 0, 1, 0, 7, 98, 1, 65, 2, 1, 66, 4, 1, 112, 125, 1, 107, 0, 1, 114, 3, 8, 117, 115, 101, 114, 110, 97, 109, 101, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 2, 4, 1, 30, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 11, 11, 1, 0, 5, 116, 121, 112, 101, 115, 3, 0, 0, 7, 253, 1, 1, 65, 5, 1, 66, 4, 1, 112, 125, 1, 107, 0, 1, 114, 3, 8, 117, 115, 101, 114, 110, 97, 109, 101, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 2, 3, 1, 30, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 1, 66, 10, 2, 3, 2, 1, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 0, 1, 106, 0, 1, 115, 1, 64, 1, 6, 99, 111, 110, 102, 105, 103, 1, 0, 2, 4, 0, 10, 115, 101, 116, 45, 99, 111, 110, 102, 105, 103, 1, 3, 1, 112, 125, 1, 106, 1, 4, 1, 115, 1, 64, 0, 0, 5, 4, 0, 13, 103, 101, 116, 45, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 6, 4, 0, 8, 103, 101, 116, 45, 115, 101, 101, 100, 1, 6, 4, 1, 31, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 102, 105, 103, 64, 48, 46, 49, 46, 48, 5, 2, 11, 12, 1, 0, 6, 99, 111, 110, 102, 105, 103, 3, 2, 0, 7, 164, 2, 1, 65, 2, 1, 65, 5, 1, 66, 4, 1, 112, 125, 1, 107, 0, 1, 114, 3, 8, 117, 115, 101, 114, 110, 97, 109, 101, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 2, 3, 1, 30, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 1, 66, 10, 2, 3, 2, 1, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 0, 1, 106, 0, 1, 115, 1, 64, 1, 6, 99, 111, 110, 102, 105, 103, 1, 0, 2, 4, 0, 10, 115, 101, 116, 45, 99, 111, 110, 102, 105, 103, 1, 3, 1, 112, 125, 1, 106, 1, 4, 1, 115, 1, 64, 0, 0, 5, 4, 0, 13, 103, 101, 116, 45, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 6, 4, 0, 8, 103, 101, 116, 45, 115, 101, 101, 100, 1, 6, 4, 1, 31, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 102, 105, 103, 64, 48, 46, 49, 46, 48, 5, 2, 4, 1, 31, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 107, 101, 101, 112, 101, 114, 64, 48, 46, 49, 46, 48, 4, 0, 11, 12, 1, 0, 6, 107, 101, 101, 112, 101, 114, 3, 4, 0, 0, 190, 4, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 84, 104, 101, 32, 99, 111, 110, 102, 117, 114, 97, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 32, 115, 101, 101, 100, 32, 107, 101, 101, 112, 101, 114, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 117, 115, 101, 114, 110, 97, 109, 101, 34, 58, 34, 84, 104, 101, 32, 117, 115, 101, 114, 110, 97, 109, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 115, 101, 101, 100, 32, 107, 101, 101, 112, 101, 114, 34, 44, 34, 112, 97, 115, 115, 119, 111, 114, 100, 34, 58, 34, 84, 104, 101, 32, 112, 97, 115, 115, 119, 111, 114, 100, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 115, 101, 101, 100, 32, 107, 101, 101, 112, 101, 114, 34, 44, 34, 101, 110, 99, 114, 121, 112, 116, 101, 100, 34, 58, 34, 79, 112, 116, 105, 111, 110, 97, 108, 32, 112, 114, 101, 118, 111, 117, 115, 108, 121, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 115, 101, 101, 100, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 115, 101, 101, 100, 32, 107, 101, 101, 112, 101, 114, 34, 125, 125, 125, 125, 44, 34, 99, 111, 110, 102, 105, 103, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 115, 101, 116, 45, 99, 111, 110, 102, 105, 103, 34, 58, 34, 76, 111, 97, 100, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 102, 114, 111, 109, 32, 97, 110, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 115, 101, 101, 100, 44, 32, 112, 97, 115, 115, 119, 111, 114, 100, 44, 32, 97, 110, 100, 32, 115, 97, 108, 116, 32, 40, 117, 115, 101, 114, 110, 97, 109, 101, 41, 92, 110, 82, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 115, 101, 101, 100, 32, 111, 114, 32, 97, 110, 32, 101, 114, 114, 111, 114, 34, 44, 34, 103, 101, 116, 45, 101, 110, 99, 114, 121, 112, 116, 101, 100, 34, 58, 34, 82, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 115, 101, 101, 100, 32, 111, 114, 32, 78, 111, 110, 101, 32, 105, 102, 32, 105, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 101, 120, 105, 115, 116, 34, 44, 34, 103, 101, 116, 45, 115, 101, 101, 100, 34, 58, 34, 71, 101, 116, 32, 116, 104, 101, 32, 112, 108, 97, 105, 110, 116, 101, 120, 116, 32, 115, 101, 101, 100, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
