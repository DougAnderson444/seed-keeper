package seed-keeper:wit-ui@0.1.0;

interface wurbo-types {

  // Details required in order to add an event listener to an element
  record listen-details {
    selector: string,
    ty: string,
  }

  // Context for the minijinja rendering
  record page {
    title: string
  }

  record input {
    placeholder: string
  }

  type encrypted = list<u8>;

  record output {
    // the resulting value of the total outputs combined
    value: option<string>,
    // optional id string: None is intial render, Some for update value
    id: option<string>,
    // the output dest for the username changes
    username: option<string>,
    // the output dest for the password changes
    password: option<string>,
    // the output dest for the encrypted changes
    encrypted: option<encrypted>,
  }

  // Content for the entire page
  record content {
    page: option<page>,
    input: option<input>,
    output: option<output>
  }

  // Context variants
  variant context {
    all-content(content),
    username(string),
    password(string),
    encrypted(encrypted),
    submit
  }

}
interface wurbo-in {

  use wurbo-types.{listen-details};

  // Add an event listener to the given element
  addeventlistener: func(details: listen-details);

  // Emit events from this component. Messages should be serialized JSON strings of Event type.
  emit: func(message: string);

}

interface wurbo-out {

  use wurbo-types.{context};

  // renders the initial Web component with the given data
  // and the target template to use as top level entry point
  render: func(ctx: context) -> result<string, string>;

  // listen on all or given selectors
  activate: func(selectors: option<list<string>>);
}

/// An example world for the component to target.
world seedworld {
  import seed-keeper:wallet/config@0.1.0;

  import wurbo-in;
  export wurbo-out;
}
