// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod seed_keeper {
  pub mod wallet {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// The confuration of the seed keeper
      #[derive(Clone)]
      pub struct Credentials {
        /// The username to use for the seed keeper
        pub username: wit_bindgen::rt::vec::Vec::<u8>,
        /// The password to use for the seed keeper
        pub password: wit_bindgen::rt::vec::Vec::<u8>,
        /// Optional prevously generated encrypted seed to use for the seed keeper
        pub encrypted: Option<wit_bindgen::rt::vec::Vec::<u8>>,
      }
      impl ::core::fmt::Debug for Credentials {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Credentials").field("username", &self.username).field("password", &self.password).field("encrypted", &self.encrypted).finish()
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod config {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Credentials = super::super::super::seed_keeper::wallet::types::Credentials;
      #[allow(unused_unsafe, clippy::all)]
      /// Load into the component from an encrypted seed, password, and salt (username)
      /// Returns the encrypted seed or an error
      pub fn set_config(config: &Credentials,) -> Result<(),wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let super::super::super::seed_keeper::wallet::types::Credentials{ username:username0, password:password0, encrypted:encrypted0, } = config;
          let vec1 = username0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = password0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let (result4_0,result4_1,result4_2,) = match encrypted0 {
            Some(e) => {
              let vec3 = e;
              let ptr3 = vec3.as_ptr() as i32;
              let len3 = vec3.len() as i32;
              
              (1i32, ptr3, len3)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };let ptr5 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wallet/config@0.1.0")]
          extern "C" {
            #[link_name = "set-config"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2, result4_0, result4_1, result4_2, ptr5);
          let l6 = i32::from(*((ptr5 + 0) as *const u8));
          match l6 {
            0 => {
              let e = ();
              Ok(e)
            }
            1 => {
              let e = {
                let l7 = *((ptr5 + 4) as *const i32);
                let l8 = *((ptr5 + 8) as *const i32);
                let len9 = l8 as usize;
                let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);
                
                wit_bindgen::rt::string_lift(bytes9)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Returns the encrypted seed or None if it doesn't exist
      pub fn get_encrypted() -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wallet/config@0.1.0")]
          extern "C" {
            #[link_name = "get-encrypted"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                let l3 = *((ptr0 + 8) as *const i32);
                let len4 = l3 as usize;
                
                Vec::from_raw_parts(l2 as *mut _, len4, len4)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l5 = *((ptr0 + 4) as *const i32);
                let l6 = *((ptr0 + 8) as *const i32);
                let len7 = l6 as usize;
                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                
                wit_bindgen::rt::string_lift(bytes7)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Get the plaintext seed
      pub fn get_seed() -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wallet/config@0.1.0")]
          extern "C" {
            #[link_name = "get-seed"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                let l3 = *((ptr0 + 8) as *const i32);
                let len4 = l3 as usize;
                
                Vec::from_raw_parts(l2 as *mut _, len4, len4)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l5 = *((ptr0 + 4) as *const i32);
                let l6 = *((ptr0 + 8) as *const i32);
                let len7 = l6 as usize;
                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                
                wit_bindgen::rt::string_lift(bytes7)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      
    }
    
  }
  pub mod wit_ui {
    
    #[allow(clippy::all)]
    pub mod wurbo_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct Page {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("title", &self.title).finish()
        }
      }
      #[derive(Clone)]
      pub struct Input {
        pub placeholder: wit_bindgen::rt::string::String,
        pub username: Option<wit_bindgen::rt::string::String>,
        pub encrypted: Option<wit_bindgen::rt::vec::Vec::<u8>>,
      }
      impl ::core::fmt::Debug for Input {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Input").field("placeholder", &self.placeholder).field("username", &self.username).field("encrypted", &self.encrypted).finish()
        }
      }
      pub type Encrypted = wit_bindgen::rt::vec::Vec::<u8>;
      #[derive(Clone)]
      pub struct Output {
        /// the resulting value of the total outputs combined
        pub value: Option<wit_bindgen::rt::string::String>,
        /// optional id string: None is intial render, Some for update value
        pub id: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the username changes
        pub username: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the password changes
        pub password: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the encrypted changes
        pub encrypted: Option<Encrypted>,
      }
      impl ::core::fmt::Debug for Output {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Output").field("value", &self.value).field("id", &self.id).field("username", &self.username).field("password", &self.password).field("encrypted", &self.encrypted).finish()
        }
      }
      /// Content for the entire page
      #[derive(Clone)]
      pub struct Content {
        pub page: Option<Page>,
        pub input: Option<Input>,
        pub output: Option<Output>,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("page", &self.page).field("input", &self.input).field("output", &self.output).finish()
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Username(wit_bindgen::rt::string::String),
        Password(wit_bindgen::rt::string::String),
        Encrypted(Encrypted),
        Submit,
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Username(e) => {
              f.debug_tuple("Context::Username").field(e).finish()
            }
            Context::Password(e) => {
              f.debug_tuple("Context::Password").field(e).finish()
            }
            Context::Encrypted(e) => {
              f.debug_tuple("Context::Encrypted").field(e).finish()
            }
            Context::Submit => {
              f.debug_tuple("Context::Submit").finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_in {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type ListenDetails = super::super::super::seed_keeper::wit_ui::wurbo_types::ListenDetails;
      #[allow(unused_unsafe, clippy::all)]
      /// Add an event listener to the given element
      pub fn addeventlistener(details: &ListenDetails,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let super::super::super::seed_keeper::wit_ui::wurbo_types::ListenDetails{ selector:selector0, ty:ty0, } = details;
          let vec1 = selector0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = ty0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-in@0.1.0")]
          extern "C" {
            #[link_name = "addeventlistener"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Emit events from this component. Messages should be serialized JSON strings of Event type.
      pub fn emit(message: &str,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let vec0 = message;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-in@0.1.0")]
          extern "C" {
            #[link_name = "emit"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0);
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod seed_keeper {
    pub mod wit_ui {
      
      #[allow(clippy::all)]
      pub mod wurbo_out {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Context = super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "seed-keeper:wit-ui/wurbo-out@0.1.0#render"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_render(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let l0 = i32::from(*((arg0 + 0) as *const u8));
            use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V47;
            let v47 = match l0 {
              0 => {
                let e47 = {
                  let l1 = i32::from(*((arg0 + 4) as *const u8));
                  let l5 = i32::from(*((arg0 + 16) as *const u8));
                  let l17 = i32::from(*((arg0 + 52) as *const u8));
                  
                  super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                    page: match l1 {
                      0 => None,
                      1 => {
                        let e = {
                          let l2 = *((arg0 + 8) as *const i32);
                          let l3 = *((arg0 + 12) as *const i32);
                          let len4 = l3 as usize;
                          let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                          
                          super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                            title: wit_bindgen::rt::string_lift(bytes4),
                          }
                        };
                        Some(e)
                      }
                      _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    },
                    input: match l5 {
                      0 => None,
                      1 => {
                        let e = {
                          let l6 = *((arg0 + 20) as *const i32);
                          let l7 = *((arg0 + 24) as *const i32);
                          let len8 = l7 as usize;
                          let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                          let l9 = i32::from(*((arg0 + 28) as *const u8));
                          let l13 = i32::from(*((arg0 + 40) as *const u8));
                          
                          super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                            placeholder: wit_bindgen::rt::string_lift(bytes8),
                            username: match l9 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l10 = *((arg0 + 32) as *const i32);
                                  let l11 = *((arg0 + 36) as *const i32);
                                  let len12 = l11 as usize;
                                  let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                                  
                                  wit_bindgen::rt::string_lift(bytes12)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            encrypted: match l13 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l14 = *((arg0 + 44) as *const i32);
                                  let l15 = *((arg0 + 48) as *const i32);
                                  let len16 = l15 as usize;
                                  
                                  Vec::from_raw_parts(l14 as *mut _, len16, len16)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                          }
                        };
                        Some(e)
                      }
                      _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    },
                    output: match l17 {
                      0 => None,
                      1 => {
                        let e = {
                          let l18 = i32::from(*((arg0 + 56) as *const u8));
                          let l22 = i32::from(*((arg0 + 68) as *const u8));
                          let l26 = i32::from(*((arg0 + 80) as *const u8));
                          let l30 = i32::from(*((arg0 + 92) as *const u8));
                          let l34 = i32::from(*((arg0 + 104) as *const u8));
                          
                          super::super::super::super::seed_keeper::wit_ui::wurbo_types::Output{
                            value: match l18 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l19 = *((arg0 + 60) as *const i32);
                                  let l20 = *((arg0 + 64) as *const i32);
                                  let len21 = l20 as usize;
                                  let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                                  
                                  wit_bindgen::rt::string_lift(bytes21)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            id: match l22 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l23 = *((arg0 + 72) as *const i32);
                                  let l24 = *((arg0 + 76) as *const i32);
                                  let len25 = l24 as usize;
                                  let bytes25 = Vec::from_raw_parts(l23 as *mut _, len25, len25);
                                  
                                  wit_bindgen::rt::string_lift(bytes25)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            username: match l26 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l27 = *((arg0 + 84) as *const i32);
                                  let l28 = *((arg0 + 88) as *const i32);
                                  let len29 = l28 as usize;
                                  let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                                  
                                  wit_bindgen::rt::string_lift(bytes29)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            password: match l30 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l31 = *((arg0 + 96) as *const i32);
                                  let l32 = *((arg0 + 100) as *const i32);
                                  let len33 = l32 as usize;
                                  let bytes33 = Vec::from_raw_parts(l31 as *mut _, len33, len33);
                                  
                                  wit_bindgen::rt::string_lift(bytes33)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            encrypted: match l34 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l35 = *((arg0 + 108) as *const i32);
                                  let l36 = *((arg0 + 112) as *const i32);
                                  let len37 = l36 as usize;
                                  
                                  Vec::from_raw_parts(l35 as *mut _, len37, len37)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                          }
                        };
                        Some(e)
                      }
                      _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    },
                  }
                };
                V47::AllContent(e47)
              }
              1 => {
                let e47 = {
                  let l38 = *((arg0 + 4) as *const i32);
                  let l39 = *((arg0 + 8) as *const i32);
                  let len40 = l39 as usize;
                  let bytes40 = Vec::from_raw_parts(l38 as *mut _, len40, len40);
                  
                  wit_bindgen::rt::string_lift(bytes40)
                };
                V47::Username(e47)
              }
              2 => {
                let e47 = {
                  let l41 = *((arg0 + 4) as *const i32);
                  let l42 = *((arg0 + 8) as *const i32);
                  let len43 = l42 as usize;
                  let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                  
                  wit_bindgen::rt::string_lift(bytes43)
                };
                V47::Password(e47)
              }
              3 => {
                let e47 = {
                  let l44 = *((arg0 + 4) as *const i32);
                  let l45 = *((arg0 + 8) as *const i32);
                  let len46 = l45 as usize;
                  
                  Vec::from_raw_parts(l44 as *mut _, len46, len46)
                };
                V47::Encrypted(e47)
              }
              n => {
                debug_assert_eq!(n, 4, "invalid enum discriminant");
                V47::Submit
              }
            };
            let result48 = <_GuestImpl as Guest>::render(v47);
            wit_bindgen::rt::dealloc(arg0, 116, 4);
            let ptr49 = _RET_AREA.0.as_mut_ptr() as i32;
            match result48 {
              Ok(e) => { {
                *((ptr49 + 0) as *mut u8) = (0i32) as u8;
                let vec50 = (e.into_bytes()).into_boxed_slice();
                let ptr50 = vec50.as_ptr() as i32;
                let len50 = vec50.len() as i32;
                ::core::mem::forget(vec50);
                *((ptr49 + 8) as *mut i32) = len50;
                *((ptr49 + 4) as *mut i32) = ptr50;
              } },
              Err(e) => { {
                *((ptr49 + 0) as *mut u8) = (1i32) as u8;
                let vec51 = (e.into_bytes()).into_boxed_slice();
                let ptr51 = vec51.as_ptr() as i32;
                let len51 = vec51.len() as i32;
                ::core::mem::forget(vec51);
                *((ptr49 + 8) as *mut i32) = len51;
                *((ptr49 + 4) as *mut i32) = ptr51;
              } },
            };ptr49
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_seed-keeper:wit-ui/wurbo-out@0.1.0#render"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_render(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "seed-keeper:wit-ui/wurbo-out@0.1.0#activate"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_activate(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::activate(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let base3 = arg1;
                  let len3 = arg2;
                  let mut result3 = Vec::with_capacity(len3 as usize);
                  for i in 0..len3 {
                    let base = base3 + i * 8;
                    let e3 = {
                      let l0 = *((base + 0) as *const i32);
                      let l1 = *((base + 4) as *const i32);
                      let len2 = l1 as usize;
                      let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                      
                      wit_bindgen::rt::string_lift(bytes2)
                    };
                    result3.push(e3);
                  }
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                  
                  result3
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// renders the initial Web component with the given data
          /// and the target template to use as top level entry point
          fn render(ctx: Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          /// listen on all or given selectors
          fn activate(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:seedworld"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3536] = [3, 0, 9, 115, 101, 101, 100, 119, 111, 114, 108, 100, 0, 97, 115, 109, 13, 0, 1, 0, 7, 234, 2, 1, 65, 2, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 4, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 11, 17, 1, 0, 11, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 3, 0, 0, 7, 249, 3, 1, 65, 5, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 6, 2, 3, 2, 1, 1, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 115, 1, 0, 4, 0, 4, 101, 109, 105, 116, 1, 3, 4, 1, 33, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 2, 11, 14, 1, 0, 8, 119, 117, 114, 98, 111, 45, 105, 110, 3, 2, 0, 7, 240, 3, 1, 65, 5, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 11, 15, 1, 0, 9, 119, 117, 114, 98, 111, 45, 111, 117, 116, 3, 4, 0, 7, 163, 7, 1, 65, 2, 1, 65, 13, 1, 66, 4, 1, 112, 125, 1, 107, 0, 1, 114, 3, 8, 117, 115, 101, 114, 110, 97, 109, 101, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 2, 3, 1, 30, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 1, 66, 10, 2, 3, 2, 1, 1, 4, 0, 11, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 3, 0, 0, 1, 106, 0, 1, 115, 1, 64, 1, 6, 99, 111, 110, 102, 105, 103, 1, 0, 2, 4, 0, 10, 115, 101, 116, 45, 99, 111, 110, 102, 105, 103, 1, 3, 1, 112, 125, 1, 106, 1, 4, 1, 115, 1, 64, 0, 0, 5, 4, 0, 13, 103, 101, 116, 45, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 6, 4, 0, 8, 103, 101, 116, 45, 115, 101, 101, 100, 1, 6, 3, 1, 31, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 102, 105, 103, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 6, 2, 3, 2, 1, 4, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 115, 1, 0, 4, 0, 4, 101, 109, 105, 116, 1, 3, 3, 1, 33, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 6, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 7, 4, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 115, 101, 101, 100, 119, 111, 114, 108, 100, 64, 48, 46, 49, 46, 48, 4, 0, 11, 15, 1, 0, 9, 115, 101, 101, 100, 119, 111, 114, 108, 100, 3, 6, 0, 0, 170, 8, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 115, 101, 101, 100, 119, 111, 114, 108, 100, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 101, 120, 97, 109, 112, 108, 101, 32, 119, 111, 114, 108, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 46, 34, 125, 125, 44, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 116, 97, 105, 108, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 97, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 44, 34, 112, 97, 103, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 105, 110, 105, 106, 105, 110, 106, 97, 32, 114, 101, 110, 100, 101, 114, 105, 110, 103, 34, 125, 44, 34, 111, 117, 116, 112, 117, 116, 34, 58, 123, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 118, 97, 108, 117, 101, 34, 58, 34, 116, 104, 101, 32, 114, 101, 115, 117, 108, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 116, 104, 101, 32, 116, 111, 116, 97, 108, 32, 111, 117, 116, 112, 117, 116, 115, 32, 99, 111, 109, 98, 105, 110, 101, 100, 34, 44, 34, 105, 100, 34, 58, 34, 111, 112, 116, 105, 111, 110, 97, 108, 32, 105, 100, 32, 115, 116, 114, 105, 110, 103, 58, 32, 78, 111, 110, 101, 32, 105, 115, 32, 105, 110, 116, 105, 97, 108, 32, 114, 101, 110, 100, 101, 114, 44, 32, 83, 111, 109, 101, 32, 102, 111, 114, 32, 117, 112, 100, 97, 116, 101, 32, 118, 97, 108, 117, 101, 34, 44, 34, 117, 115, 101, 114, 110, 97, 109, 101, 34, 58, 34, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 100, 101, 115, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 117, 115, 101, 114, 110, 97, 109, 101, 32, 99, 104, 97, 110, 103, 101, 115, 34, 44, 34, 112, 97, 115, 115, 119, 111, 114, 100, 34, 58, 34, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 100, 101, 115, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 112, 97, 115, 115, 119, 111, 114, 100, 32, 99, 104, 97, 110, 103, 101, 115, 34, 44, 34, 101, 110, 99, 114, 121, 112, 116, 101, 100, 34, 58, 34, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 100, 101, 115, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 99, 104, 97, 110, 103, 101, 115, 34, 125, 125, 44, 34, 99, 111, 110, 116, 101, 110, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 110, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 101, 110, 116, 105, 114, 101, 32, 112, 97, 103, 101, 34, 125, 44, 34, 99, 111, 110, 116, 101, 120, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 118, 97, 114, 105, 97, 110, 116, 115, 34, 125, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 105, 110, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 34, 58, 34, 65, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 44, 34, 101, 109, 105, 116, 34, 58, 34, 69, 109, 105, 116, 32, 101, 118, 101, 110, 116, 115, 32, 102, 114, 111, 109, 32, 116, 104, 105, 115, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 32, 77, 101, 115, 115, 97, 103, 101, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 100, 32, 74, 83, 79, 78, 32, 115, 116, 114, 105, 110, 103, 115, 32, 111, 102, 32, 69, 118, 101, 110, 116, 32, 116, 121, 112, 101, 46, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 111, 117, 116, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 114, 101, 110, 100, 101, 114, 34, 58, 34, 114, 101, 110, 100, 101, 114, 115, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 87, 101, 98, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 100, 97, 116, 97, 92, 110, 97, 110, 100, 32, 116, 104, 101, 32, 116, 97, 114, 103, 101, 116, 32, 116, 101, 109, 112, 108, 97, 116, 101, 32, 116, 111, 32, 117, 115, 101, 32, 97, 115, 32, 116, 111, 112, 32, 108, 101, 118, 101, 108, 32, 101, 110, 116, 114, 121, 32, 112, 111, 105, 110, 116, 34, 44, 34, 97, 99, 116, 105, 118, 97, 116, 101, 34, 58, 34, 108, 105, 115, 116, 101, 110, 32, 111, 110, 32, 97, 108, 108, 32, 111, 114, 32, 103, 105, 118, 101, 110, 32, 115, 101, 108, 101, 99, 116, 111, 114, 115, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
